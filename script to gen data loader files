set<String> setUpObjects = new set<String>();
// Not adding user object as portal users don't get carried over. These would also need to be loaded with external ids
//setUpObjects.add('User');
//setUpObjects.add('Group');
setUpObjects.add('RecordType');

set<String> objectsToLoad = new set<String>();
objectsToLoad.add('Client_Endorsement__c');
set<String> objectsProcessed = new set<String>();
objectsToLoad.add('Account');
objectsToLoad.add('Contact');
objectsToLoad.add('User');
//objectsToLoad.removeAll(objectsLoaded);
String sandboxIdField = 'Sandbox_Migration_Id__c';

// Variables to hold the process results
map<String, String> objToQueryString = new map<String, String>();
map<String, String> objToCreateMappingFile = new map<String, String>();
map<String, String> objToUpdateMappingFile = new map<String, String>();
// Begin processing
for(String objAPIName : objectsToLoad){
	Map<String, Schema.SObjectField> fieldMap = Schema.describeSObjects(new String[]{objAPIName})[0].fields.getMap();
	set<String> createFields = new set<String>();
	set<String> upsertFields = new set<String>();
	set<String> queryFields = new set<String>();
	//fieldMap.remove(sandboxIdField);
	for( String fieldName : fieldMap.KeySet() ) {
		Schema.SObjectField fld = fieldMap.get(fieldName);
		Schema.DescribeFieldResult dfr = fld.getDescribe();
		if(dfr.isCreateable()){
			if(dfr.getType() == Schema.DisplayType.REFERENCE){
				String parentObjAPIName = String.ValueOf(dfr.getReferenceTo()[0]);
				if(setUpObjects.contains(parentObjAPIName)){
					createFields.add(fieldName);
				}else if(objectsToLoad.contains(parentObjAPIName)){
					upsertFields.add(fieldName);
				}
			}else{
				createFields.add(fieldName);
			}
		}
	}

	// Generate the SOQL String
	queryFields.addAll(createFields);
	queryFields.addAll(upsertFields);
	String SOQLSelectFields = 'Id';
	for(String fld : queryFields){
		SOQLSelectFields += ', '+fld;
	}
	String SOQLQuery = 'SELECT '+SOQLSelectFields+' FROM '+objAPIName;

	// Generate the insert mapping file
	String mappingFileForCreate = '#Mapping values from source file (left) and upsert to Salesforce (right)';
	// All the fields that can be created have a direct mapping. These should all be simple input fields.
	// This also includes reference fields to users or groups which are available in the system and don't need mapping.
	for(String fld : createFields){
		mappingFileForCreate += '\n'+fld+'='+fld;
	}
	// Add the mapping for the Id field to go to the SandboxId field in this.
	mappingFileForCreate += '\nId'+'='+sandboxIdField;
	
	String mappingFileForUpdate = '';
	if(!upsertFields.isEmpty()){
		// Now process the upsert fields.
		// The upsert fields are all lookup fields that have the parent objects within the scope of the data copy.
		// If the object has already been processed, we should be able to map the field being loaded in the record create job.
		// This will be needed if the object being loaded is a detail object.
		// If not, add the field to an update mapping job which can be run after all the inserts are processed.
		// All the fields that can be created have a direct mapping. These should all be simple input fields.
		for(String fld : upsertFields){
			String relationshipFieldName;
			if(fld.endsWithIgnoreCase('Id')){
				relationshipFieldName = fld.removeEndIgnoreCase('Id');
			}else{
				relationshipFieldName = fld.replace('__c', '__r');
			}
			String mappingString = '\n'+fld+'='+relationshipFieldName+'.'+sandboxIdField;
			if(objectsProcessed.contains(fld)){
				mappingFileForCreate += mappingString;
			}else{
				mappingFileForUpdate += mappingString;
			}
		}
	}

	// All the processing for this object is done. Lets mark it as complete.
	// This would mean that any reference to this object can be marked in the insert jobs.
	objToQueryString.put(objAPIName, SOQLQuery);
	objToCreateMappingFile.put(objAPIName, mappingFileForCreate);
	objToUpdateMappingFile.put(objAPIName, mappingFileForUpdate);
	objectsProcessed.add(objAPIName);
	
	break;
}
// Mapping files ready
// Queries ready
// Now what?
// Prepare the process-conf.xml file
	// Do the query jobs
// then prepare the bat file
// maybe both in tandem?
String processConfFile = '<beans>';
String rootFolderForAllFiles = 'c:\\dataloader\\samples\\data\\';
String extractJobPrefix = 'Extract_';
String createJobPrefix = 'Create_';
String updateJobPrefix = 'Update_';
for(String objAPIName : objectsToLoad){
	// Create the bean for extract job
	String SOQLQuery = objToQueryString.get(objAPIName);
	String extractJobName = extractJobPrefix+objAPIName;
	processConfFile+= '\n<bean id="'+extractJobName+'" class="com.salesforce.dataloader.process.ProcessRunner" singleton="false">';
	processConfFile+= '\n<property name="name" value="'+extractJobName+'"/>';
	processConfFile+= '\n<property name="configOverrideMap">';
	processConfFile+= '\n<map>';
	processConfFile+= '\n<entry key="process.operation" value="extract"/>';
	processConfFile+= '\n<entry key="dataAccess.type" value="csvWrite"/>';
	processConfFile+= '\n<entry key="sfdc.entity" value="'+objAPIName+'"/>';
	processConfFile+= '\n<entry key="sfdc.extractionSOQL" value="'+SOQLQuery+'"/>';
	processConfFile+= '\n<entry key="dataAccess.name" value="'+rootFolderForAllFiles+extractJobName+'.csv"/>';
	processConfFile+= '\n</map>';

	// Create the bean for create job
	String mappingFileForCreate = objToCreateMappingFile.get(objAPIName);
	String createJobName = createJobPrefix+objAPIName;
	processConfFile+= '\n<bean id="'+createJobName+'" class="com.salesforce.dataloader.process.ProcessRunner" singleton="false">';
	processConfFile+= '\n<property name="name" value="'+createJobName+'"/>';
	processConfFile+= '\n<property name="configOverrideMap">';
	processConfFile+= '\n<map>';
	processConfFile+= '\n<entry key="process.operation" value="upsert"/>';
	processConfFile+= '\n<entry key="dataAccess.type" value="csvRead"/>';
	processConfFile+= '\n<entry key="sfdc.entity" value="'+objAPIName+'"/>';
	processConfFile+= '\n<entry key="sfdc.externalIdField" value="'+sandboxIdField+'"/>';
	processConfFile+= '\n<entry key="process.mappingFile" value="'+rootFolderForAllFiles+createJobName+'.sdl"/>';
	processConfFile+= '\n<entry key="dataAccess.name" value="'+rootFolderForAllFiles+extractJobName+'.csv"/>';
	processConfFile+= '\n</map>';

	// Create the bean for update job
	String mappingFileForUpdate = objToUpdateMappingFile.get(objAPIName);
	if(!String.isEmpty(mappingFileForUpdate)){
		String updateJobName = createJobPrefix+objAPIName;
		processConfFile+= '\n<bean id="'+updateJobName+'" class="com.salesforce.dataloader.process.ProcessRunner" singleton="false">';
		processConfFile+= '\n<property name="name" value="'+updateJobName+'"/>';
		processConfFile+= '\n<property name="configOverrideMap">';
		processConfFile+= '\n<map>';
		processConfFile+= '\n<entry key="process.operation" value="upsert"/>';
		processConfFile+= '\n<entry key="dataAccess.type" value="csvRead"/>';
		processConfFile+= '\n<entry key="sfdc.entity" value="'+objAPIName+'"/>';
		processConfFile+= '\n<entry key="sfdc.externalIdField" value="'+sandboxIdField+'"/>';
		processConfFile+= '\n<entry key="process.mappingFile" value="'+rootFolderForAllFiles+updateJobName+'.sdl"/>';
		processConfFile+= '\n<entry key="dataAccess.name" value="'+rootFolderForAllFiles+extractJobName+'.csv"/>';
		processConfFile+= '\n</map>';
	}
}
processConfFile+= '</beans>';

	Document d = new Document();
	d.Name = 'Process conf file';
	d.Body = Blob.valueOf(processConfFile);
	d.ContentType = 'text/plain';
	d.Type = 'txt';
	d.FolderId = '0055K000000IYUF';
	insert d;
	system.debug(d.Name+ ' with id '+d.Id);
	
/*
	d = new Document();
	d.Name = 'Mapping file for update for '+objAPIName;
	d.Body = Blob.valueOf(mappingFileForUpdate);
	d.ContentType = 'text/plain';
	d.Type = 'txt';
	d.FolderId = '0055K000000IYUF';
	insert d;
	system.debug(d.Name+ ' with id '+d.Id);
	*/

// 1. Insert account where IsPersonAccount = false
// 2. Insert contact where IsPersonAccount = false --- tested that no staff records have a lookup to account that is a personaccount
// 3. Insert users where contactid != null --- tested that no user records have a lookup to contact that is a personaccount
// 4. Insert account where IsPersonAccount = true
// 5. Insert all other
// 6. Upsert as needed (including the accounts, contacts and users)

// Note to self - Salesforce documentation says polymorphic lookups don't support external Id - which means that owner id would not support external Id.
// If this is the case, then what would happen if you delete the queue on lead object - not used so no impact? 